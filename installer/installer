#!/bin/bash
#
# PufferPanel - A Minecraft Server Management Panel
# Copyright (c) 2014 PufferPanel
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see http://www.gnu.org/licenses/.


######################
# CONSTANTS
######################

RED=$'\e[0;31m'
GREEN=$'\e[0;32m'
END=$'\e[0m'
VERSION="0.2.0"
PANELVERSION="0.8.1-beta"

######################
# Function declaration
######################

# Parameters: Command, DisplayName
function isInstalled {
    if type "$1" 1>/dev/null 2>&1; then
        echo "$2: [${GREEN}Installed${END}]"
        return 0
    else
        echo "$2: [${RED}Not Installed${END}]"
        return 1
    fi
}

# Parameters: None
function printHelp {
    echo "PufferPanel Installer - Version ${VERSION} (${PANELVERSION})"
    echo "Optional parameters: "
    echo "-h           | Prints this help page"
    echo "-u [user]    | Sets the user/group owner of the panel files"
    echo "-t           | Checks if the depedencies are installed without installing panel"
    echo "-p [path]    | Sets the install path for the panel (default /srv/PufferPanel)"
    echo "-w [service] | Specifies the web service to use, accepts nginx/apache/none/auto (default auto)"
    echo "-D           | Downloads and installs the latest dev build"
}

#Parameters: None
function findWebService {
    if nginx -v >/dev/null 2>&1; then
        echo "nginx"
    elif apache -v >/dev/null 2>&1; then
        echo "apache"
    else
        echo "none"
    fi
}

# Parameters: Path
function buildLanguage {
    local directory=$1
    bash ${directory}/tools/language-builder.sh -p ${directory}
}

# Parameters: Webuser, Path
function fixPermissions {
    local webuser=$1
    local path="$2"
    chmod -R 774 ${path}/src/{core,logs,cache}
    if [[ "${webuser}" != "none" ]]; then
        if getent passwd ${webuser} > /dev/null; then
            echo "Chowning files to ${webuser} user"
            if ! chown -R ${webuser}:${webuser} $path; then
                echo "${RED}Could not chown ${path} to ${webuser}, please do this manually${END}"
            fi
            echo "If the above chown is not the correct user or did not work, please manually chown the ${path} folder"
        else
            echo "${RED}${webuser} user not found, cannot chown to correct user${END}"
        fi
    fi
}

# Parameters: None
function checkDependencies {
    local canInstall=true
    local phpInstalled=false
    local extensions=("curl" "hash" "openssl" "mcrypt" "pdo" "pdo_mysql")
    local result=""

    echo "Checking dependencies:"
    if ! isInstalled php PHP; then
        phpInstalled=false
        canInstall=false
    fi

    if ! isInstalled git Git; then
        canInstall=false
    fi

    if ! isInstalled mysql MySQL-client; then
        canInstall=false
    fi

    result=`php -r 'exit (version_compare(PHP_VERSION, "5.5.0") >= 0 ? "0" : "255");' >/dev/null 2>&1`
    if [[ "${result}" -eq "0" ]]; then
        echo "PHP 5.5.0+: [${GREEN}Installed${END}]"
    else
        echo "PHP 5.5.0+: [${RED}Not Installed${END}]"
        canInstall=false
    fi

    for i in ${extensions[@]}; do
        php -r 'exit (extension_loaded($argv[1]) ? 0 : 255);' -- ${i} >/dev/null 2>&1
        if [ $? == 0 ]; then
            echo "PHP-${i}: [${GREEN}Installed${END}]"
        else
            echo "PHP-${i}: [${RED}Not Installed${END}]"
            canInstall=false
        fi
    done

    if ${canInstall}; then
        echo "${GREEN}All dependencies are installed${END}"
        return 0
    else
        echo "${RED}Please ensure all dependencies are installed${END}"
        return 1
    fi
}

# Parameters: Path
function installPanelFiles {
    local installDev=$1
    local installPath="$2"

    echo "Extracting PufferPanel"
    if ${installDev}; then
        if ! git clone https://github.com/PufferPanel/PufferPanel.git ${installPath}; then
            echo "{RED}Failed to clone repo manually${END}"
            return 1
        fi
        #ON RELEASE, REMOVE THIS
        git --git-dir=${installPath}/.git --work-tree=${installPath} checkout kraken
        buildLanguage ${installPath}
    else
        match=$(grep --text --line-number '^__PUFFERPANEL.TAR.GZ__$' $0 | cut -d ':' -f 1)
        payload_start=$((match + 1))
        if ! tail -n +${payload_start} $0 | tar -xzf - ${installpath}; then
            echo "${RED}An error occured while installing, falling back to manual${END}"
            if ! git clone https://github.com/PufferPanel/PufferPanel.git ${installPath} || ! git --git-dir=${installPath}/.git --work-tree=${installPath} checkout tags/${PANELVERSION}; then
                echo "${RED}Failed to clone repo manually${END}"
                return 1
            fi
            buildLanguage ${installPath}
        fi
    fi
    return 0
}

# Parameters: Path
function installComposer {
    local installPath="$1"
    echo "Installing Composer"
    if ! curl -sS https://getcomposer.org/installer | php -- --install-dir=${installPath}/tools; then
        echo "${RED}An error occured while installing, halting${END}"
        return 1
    fi

    if ! php ${installPath}/tools/composer.phar install -d ${installPath}; then
        echo "${RED}An error occured while installing, halting${END}"
        return 1
    fi
    return 0
}

# Parameters WebService Path
function installWebConfig {
    local webservice=$1
    local installPath="$2"
    if [[ "${webservice}" != "none" ]]; then
        echo "Installing web config"
        echo -n "Please enter your site's URL (without http://):"
        read siteurl
        local targetfile="${installPath}/tools/webconfigs/${webservice}.conf"
        local destination=""
        case "$webservice" in
            nginx)
                if [ -d "/etc/nginx/sites-enabled" ]; then
                    destination="/etc/nginx/sites-available/pufferpanel"
                    ln -s ../sites-available/pufferpanel /etc/nginx/sites-enabled/pufferpanel
                elif [ -d "/etc/nginx/conf.d" ]; then
                    destination="/etc/nginx/conf.d/pufferpanel.conf"
                fi

                case "$distro" in
                    debian|ubuntu)
                        phpserv=$(grep "^listen[ ]=" /etc/php5/fpm/pool.d/www.conf | sed -e 's/listen\s*=\s*//g')
                        ;;
                    *)
                        phpserv=$(grep "^listen[ ]=" /etc/php-fpm.d/www.conf | sed -e 's/listen\s*=\s*//g')
                        ;;
                esac
                ;;
            apache)
                #TODO: Generate/Move config to apache folder
                ;;
        esac
        if [ -n "$destination" ]; then
            local sedcmd=''
            for var in finalpath siteurl phpserv;do
                printf -v sc 's/${%s}/%s/;' $var "${!var//\//\\/}"
                sedcmd+="$sc"
            done
            sed -e "$sedcmd" < ${targetfile} > ${destination}

        else
            echo "${RED}Could not move web config, please see ${finalpath}/tools/webconfigs/ for example configs${END}"
            return 1
        fi
    fi
    return 0
}

# Parameters: Source, Destination
function copyFiles {
    local sourcePath="$1"
    local destPath="$2"
    echo "Moving ${sourcePath} to ${destPath}"

    mkdir -p ${destPath}
    shopt -s dotglob
    mv ${sourcePath}/* ${destPath}
}

# Parameters Path
function installSql {
    local installpath="$1"

    echo "Preparing MySQL connection"
    echo "${GREEN}For this step, please use either root or an account with database creation and GRANT${END}"

    local mysqlhost="localhost"
    local mysqluser="root"
    local mysqlport="3306"
    local mysqlpass="root"

    echo -n "MySQL Host [${mysqlhost}]: "
    read inputmysqlhost
    if [ -n "${inputmysqlhost}" ]; then
        mysqlhost=${inputmysqlhost}
    fi

    echo -n "MySQL Port [${mysqlport}]: "
    read inputmysqlport
    if [ -n "${inputmysqlport}" ]; then
        mysqlhost=${inputmysqlport}
    fi

    echo -n "MySQL Username [${mysqluser}]: "
    read inputmysqluser
    if [ -n "${inputmysqluser}" ]; then
        mysqluser=${inputmysqluser}
    fi

    until mysql --host=${mysqlhost} --port=${mysqlport} --user=${mysqluser} --password=${mysqlpass} -e "exit" >/dev/null 2>/dev/null; do
        echo -n "MySQL Password: "
        read -s mysqlpass
        echo
    done

    echo "Executing panel version installer"
    if ! php -f ${installpath}/install/install.php -- host=${mysqlhost} port=${mysqlport} user=${mysqluser} pass=${mysqlpass}; then
        echo "${RED}Executing database install has failed${END}"
        return 1
    fi

    return 0
}



######################
# Variables
######################

finalpath="/srv/PufferPanel"
webuser=""
testInstall=false
webservice="auto"
installDev=false
distro=`. /etc/os-release 2>/dev/null; echo $ID`

######################
# Main
######################

while getopts "hutp:w:D" opt; do
    case "$opt" in
    h)
        printHelp
        exit
        ;;
    u)
        webuser=$OPTARG
        ;;
    t)
        testInstall=true
        ;;
    p)
        finalpath=$OPTARG
        ;;
    w)
        case $OPTARG in
            apache|nginx|none|auto)
                webservice=$OPTARG
                ;;
            *)
                echo "${RED}Invalid web service passed${END}"
                ;;
        esac
        ;;
    D)
       installDev=true
       ;;
    esac
done

shift $((OPTIND-1))

[ "$1" = "--" ] && shift

echo "PufferPanel Installer - Version ${VERSION} (${PANELVERSION})"

echo "------"
echo "Install path: ${finalpath}"
echo "Testing only: ${testInstall}"
if [[ ${webservice} == "auto" ]]; then
    webservice=$(findWebService)
fi
echo "Web service: ${webservice}"

echo "------"
if [ -d "${finalpath}" ]; then
    echo -n "${RED}Install folder (${finalpath}) already exists, override? (y/n):${END} "
    read validate
    if [[ "${validate}" == "y" ]]; then
        rm -rf ${finalpath}
        echo "-----"
    else
        exit 0
    fi
fi

if ! checkDependencies; then
    exit 1;
fi

if ${testInstall}; then
    exit 0;
fi

echo "------"
installPath=$(mktemp -d)
if ! installPanelFiles ${installDev} ${installPath}; then
    exit 1;
fi

echo "-----"
if ! installComposer ${installPath}; then
    exit 1;
fi

echo "-----"
if ! installSql ${installPath}; then
    exit 1;
fi

echo "-----"
echo "Finishing install"

if [ -z "$webuser" ]; then    
    if [[ "${distro}" == "ubuntu" ]]; then
        webuser="www-data";
    elif [[ "${distro}" == "debian" ]]; then
        webuser="www-data";
    else
        webuser=${webservice}
    fi
fi

copyFiles ${installPath} ${finalpath}

echo "-----"
installWebConfig ${webservice} ${finalpath}

echo "-----"
fixPermissions ${webuser} ${finalpath}

echo "${GREEN}PufferPanel has installed successfully.${END}"
exit

##ATTACHED RESOURCES
__PUFFERPANEL.TAR.GZ__