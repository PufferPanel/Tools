#!/bin/bash
#
# PufferPanel - A Minecraft Server Management Panel
# Copyright (c) 2014 PufferPanel
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see http://www.gnu.org/licenses/.

######################

# Function declaration
function isInstalled {
    if type "$1" 1>/dev/null 2>&1; then
        echo -e "$2: [${GREEN}Installed${NORMAL}]"
        return 0
    else
        echo -e "$2: [${RED}Not Installed${NORMAL}]"
        return 1
    fi
}

function printHelp {
    echo "PufferPanel Installer - Version ${VERSION}"
    echo "Optional parameters: "
    echo "-u [user] | Sets the user/group owner of the panel files"
    echo "-t        | Checks if the depedencies are installed without installing panel"
}

######################

# CONSTANTS
RED="\e[0;31m"
GREEN="\e[0;32m"
NORMAL="\e[0m"
VERSION=0.2.0

######################

# Variables
finalpath="/srv/PufferPanel"
#TODO: Redo web user logic
webuser="apache"
test=false

######################

# Begin execution process

#TODO
#Add in a configuration only argument in case of bad configs
#Add in install-path setting
#Add in web server config to copy
while getopts "h?tu" opt; do
    case "$opt" in
    h)
        printHelp
        exit
        ;;
    u)
        webuser=$OPTARG
        ;;
    t)
        test=true
        ;;
    esac
done

shift $((OPTIND-1))

[ "$1" = "--" ] && shift

echo "PufferPanel Installer - Version $version"
echo "------"
echo "Install path: ${finalpath}"
echo "Testing only: ${test}"
echo "------"
echo "Checking dependencies:"

#TODO: Improve entire dep checking
canInstall=true

#Check if PHP is installed
if isInstalled php PHP; then
    phpInstalled=true
else
    canInstall=false
    phpInstalled=false
fi

#Check if Git is installed
if ! isInstalled git Git; then
    canInstall=false
fi

#Check if MySQL is installed
if ! isInstalled mysql MySQL-client; then
    canInstall=false
fi

#Check if PHP dependencies are installed
if php -r 'exit (version_compare(PHP_VERSION, "5.5.0") < 0 ? "1" : "0");' >/dev/null 2>&1; then
    echo -e "PHP 5.5.0+: [${GREEN}Installed${NORMAL}]"
else
    echo -e "PHP 5.5.0+: [${RED}Not Installed${NORMAL}]"
    canInstall=false
fi

extensions=("curl" "hash" "openssl" "mcrypt" "pdo" "pdo_mysql")
for i in ${extensions[@]}; do
    phpcmd=`php <<EOF
<?php exit (extension_loaded("${i}") ? "1" : "0"); ?>
EOF`
    if ${phpcmd} >/dev/null 2>&1; then
        echo -e "PHP-${i}: [${GREEN}Installed${NORMAL}]"
    else
        echo -e "PHP-${i}: [${RED}Not Installed${NORMAL}]"
        canInstall=false
    fi
done

echo "------"

if ${canInstall}; then
    if ${test}; then
        echo -e "${GREEN}All dependencies are validated${NORMAL}"
        exit
    else
        echo -e "${GREEN}All dependencies are installed, processing with installation${NORMAL}"
    fi
else
    echo -e "${RED}Please ensure all dependencies are installed${NORMAL}"
    exit
fi

installpath=$(mktemp -d)

echo "-----"
echo "Extracting PufferPanel to ${installpath}"
match=$(grep --text --line-number '^__PUFFERPANEL.TAR.GZ__$' $0 | cut -d ':' -f 1)
payload_start=$((match + 1))
if ! tail -n +${payload_start} $0 | tar -xzf - ${installpath}; then
    echo -e "${RED}An error occured while installing, halting${NORMAL}"
    exit
fi


echo "-----"
echo "Installing Composer"

if ! curl -sS https://getcomposer.org/installer | php -- --install-dir=${installpath}/tools; then
    echo -e "${RED}An error occured while installing, halting${NORMAL}"
    exit
fi

if ! php -d ${installpath} tools/composer.phar install; then
    echo -e "${RED}An error occured while installing, halting${NORMAL}"
    exit
fi

#TODO
#Should be callable without executing above
#Likely can rewrite this logic to be more clear
echo "-----"
echo "Preparing MySQL connection"
echo -e "${RED}For this step, please use either root or an account with database creation and GRANT${NORMAL}"

mysqlhost="localhost"
mysqluser="root"
mysqlport="3306"

echo -n "MySQL Host [${mysqlhost}]: "
read inputmysqlhost
if [ -n "${inputmysqlhost}" ]; then
    mysqlhost=${inputmysqlhost}
fi

echo -n "MySQL Port [${mysqlport}]: "
read inputmysqlport
if [ -n "${inputmysqlport}" ]; then
    mysqlhost=${inputmysqlport}
fi

echo -n "MySQL Username [${mysqluser}]: "
read inputmysqluser
if [ -n "${inputmysqluser}" ]; then
    mysqluser=${inputmysqluser}
fi

notValid=true
while ${notValid}; do
    echo -n "MySQL Password: "
    read -s mysqlpass
    if mysql --host=${mysqlhost} --port=${mysqlport} -user=${mysqluser} -password=${mysqlpass} -e "exit"; then
        notValid=false
    else
        echo "${RED}Database connection could not be established${NORMAL}"
    fi
done

echo "-----"
echo "Executing panel version installer"
if ! php -f ${installpath}/install/install.php --host=${mysqlhost} --port=${mysqlport} --user={mysqluser} --pass={mysqlpass}; then
    echo "${RED}Executing database install has failed${NORMAL}"
    exit
fi
#TODO: This will be located in the panel directory, and will generate just the config.json

echo "-----"
echo "Finishing install"

mkdir -p ${finalpath}
shopt -s dotglob
mv ${installpath}/* ${finalpath}
chmod -R 774 ${finalpath}/src/{core,logs,cache}

#TODO: Validate if this is needed, and if so, if it could be redone a little

if getent passwd ${webuser} > /dev/null; then
  echo "Chowning files to ${webuser} user"  
  if ! chown -R ${webuser}:${webuser} $finalpath; then
    echo -e "${RED}Could not chown ${finalpath} to ${webuser}, please do this manually${NORMAL}"
  fi
else
  echo -e "${RED}${webuser} user not found, cannot chown to correct user${NORMAL}"
fi

echo -e "${GREEN}PufferPanel has installed successfully.${NORMAL}"
echo -e "If the above chown is not the correct user or did not work, please manually chown the ${finalpath} folder"
exit

##ATTACHED RESOURCES
__PUFFERPANEL.TAR.GZ__